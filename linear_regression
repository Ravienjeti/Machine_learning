import numpy as np

class LR:
    def __init__(self):
        self.w = None

    def train(self, X, y):
        X = np.array(X)
        y = np.array(y).reshape((-1, 1))
        X = np.c_[np.ones((X.shape[0], 1)), X]
        c = np.zeros((X.shape[1], X.shape[1])) //c is xTx
        for row in X:
            c += np.outer(row, row)
        ci = np.linalg.pinv(c) //ci is invese of xTx
        p = np.dot(X.T, y)
        self.w = np.dot(ci, p) // weights
        return self.w

    def predict(self, X):
        X = np.array(X)
        X = np.c_[np.ones((X.shape[0], 1)), X]
        return np.dot(X, self.w)


X = [[2, 5], [3, 7], [4, 9], [5, 11]]
y = [7, 11, 15, 19]

model = LR()
w = model.train(X, y)
print("Weights:", w.flatten())

pred = model.predict(X)
print("Predictions:", pred.flatten())
